xlab("Restored age (years)") +
ylab(expression(paste("Average ", N[2], " flux (", mu, "mol N ", m^2, " ", h^-1, ")"))) +
coord_cartesian(ylim = c(-10, 120)) +
scale_y_continuous(breaks = seq(-20, 120, 20))
tiff("Summer N2 regression", width = 500, height = 160, units = "mm", res = 300, compression = "lzw")
annual.data %>%
filter(Season == "Summer") %>%
ggplot(aes(Age, N2Flux)) +
geom_hline(yintercept = 0, size = 0.2, colour = "grey23") +
geom_vline(xintercept = 0, size = 0.2, colour = "grey23") +
geom_point(size = 4) +
theme(panel.background = element_rect(fill = "white", colour = NA),
axis.title.x = element_text(margin = margin(t = 15), size = 28),
axis.title.y = element_text(margin = margin(r = 15), size = 28),
axis.line.x = element_line(colour = "black", size = 0.8),
axis.line.y = element_line(colour = "black", size = 0.8),
panel.grid.major = element_line(colour = "grey70", size = 0.25),
axis.text.x = element_text(size = 20, colour = "black"),
axis.text.y = element_text(size = 20, colour = "black")) +
geom_smooth(method = "lm", formula = y ~ poly(x,2), se = F, size = 2) +
xlab("Restored age (years)") +
ylab(expression(paste("Average ", N[2], " flux (", mu, "mol N ", m^2, " ", h^-1, ")"))) +
coord_cartesian(ylim = c(-10, 120)) +
scale_y_continuous(breaks = seq(-20, 120, 20))
dev.off()
annual.data %>%
filter(Season == "Fall") %>%
ggplot(aes(Age, N2Flux)) +
geom_hline(yintercept = 0, size = 0.2, colour = "grey23") +
geom_vline(xintercept = 0, size = 0.2, colour = "grey23") +
geom_point(size = 4) +
theme(panel.background = element_rect(fill = "white", colour = NA),
axis.title.x = element_text(margin = margin(t = 15), size = 28),
axis.title.y = element_text(margin = margin(r = 15), size = 28),
axis.line.x = element_line(colour = "black", size = 0.8),
axis.line.y = element_line(colour = "black", size = 0.8),
panel.grid.major = element_line(colour = "grey70", size = 0.25),
axis.text.x = element_text(size = 20, colour = "black"),
axis.text.y = element_text(size = 20, colour = "black")) +
geom_smooth(method = "lm", formula = y ~ poly(x,2), se = F, size = 2) +
xlab("Restored age (years)") +
ylab(expression(paste("Average ", N[2], " flux (", mu, "mol ", N[2], " ", m^2, " ", h^-1, ")"))) +
coord_cartesian(ylim = c(-10, 120)) +
scale_y_continuous(breaks = seq(-20, 120, 20))
tiff("Fall N2 regression", width = 500, height = 160, units = "mm", res = 300, compression = "lzw")
annual.data %>%
filter(Season == "Fall") %>%
ggplot(aes(Age, N2Flux)) +
geom_hline(yintercept = 0, size = 0.2, colour = "grey23") +
geom_vline(xintercept = 0, size = 0.2, colour = "grey23") +
geom_point(size = 4) +
theme(panel.background = element_rect(fill = "white", colour = NA),
axis.title.x = element_text(margin = margin(t = 15), size = 28),
axis.title.y = element_text(margin = margin(r = 15), size = 28),
axis.line.x = element_line(colour = "black", size = 0.8),
axis.line.y = element_line(colour = "black", size = 0.8),
panel.grid.major = element_line(colour = "grey70", size = 0.25),
axis.text.x = element_text(size = 20, colour = "black"),
axis.text.y = element_text(size = 20, colour = "black")) +
geom_smooth(method = "lm", formula = y ~ poly(x,2), se = F, size = 2) +
xlab("Restored age (years)") +
ylab(expression(paste("Average ", N[2], " flux (", mu, "mol ", N[2], " ", m^2, " ", h^-1, ")"))) +
coord_cartesian(ylim = c(-10, 120)) +
scale_y_continuous(breaks = seq(-20, 120, 20))
dev.off()
annual.data.sand %>%
ggplot(aes(Age, N2Flux, colour = Habitat)) +
geom_point(size = 4) +
geom_smooth(method = "lm", formula = y ~ poly(x,2), se = F, size = 2) +
theme(panel.background = element_rect(fill = "white", colour = NA),
axis.title.x = element_text(margin = margin(t = 15), size = 28),
axis.title.y = element_text(margin = margin(r = 15), size = 28),
axis.line.x = element_line(colour = "black", size = 0.8),
axis.line.y = element_line(colour = "black", size = 0.8),
panel.grid.major = element_line(colour = "grey70", size = 0.25),
axis.text.x = element_text(size = 20, colour = "black"),
axis.text.y = element_text(size = 20, colour = "black"),
legend.title = element_text(size = 23, face = "bold"),
legend.text = element_text(size = 20)) +
scale_colour_manual(values = c("darkorchid4", "olivedrab", "darkgoldenrod"),
labels = c("  oyster",
"  marsh",
"  sandflat")) +
xlab("Restored age (years)") +
ylab(expression(paste("Average ", N[2], " flux (", mu, "mol N ", m^2, " ", h^-1, ")"))) +
coord_cartesian(ylim = c(-10, 120)) +
scale_y_continuous(breaks = seq(-20, 120, 20))
annual.data.sand <- add.sandflat(annual.data)
annual.data.sand$Habitat <- factor(annual.data.sand$Habitat, levels = c("oyster", "marsh", "sandflat"))
annual.data.sand <- set.factors.habitat(annual.data.sand)
annual.data.sand %>%
ggplot(aes(Age, N2Flux, colour = Habitat)) +
geom_point(size = 4) +
geom_smooth(method = "lm", formula = y ~ poly(x,2), se = F, size = 2) +
theme(panel.background = element_rect(fill = "white", colour = NA),
axis.title.x = element_text(margin = margin(t = 15), size = 28),
axis.title.y = element_text(margin = margin(r = 15), size = 28),
axis.line.x = element_line(colour = "black", size = 0.8),
axis.line.y = element_line(colour = "black", size = 0.8),
panel.grid.major = element_line(colour = "grey70", size = 0.25),
axis.text.x = element_text(size = 20, colour = "black"),
axis.text.y = element_text(size = 20, colour = "black"),
legend.title = element_text(size = 23, face = "bold"),
legend.text = element_text(size = 20)) +
scale_colour_manual(values = c("darkorchid4", "olivedrab", "darkgoldenrod"),
labels = c("  oyster",
"  marsh",
"  sandflat")) +
xlab("Restored age (years)") +
ylab(expression(paste("Average ", N[2], " flux (", mu, "mol N ", m^2, " ", h^-1, ")"))) +
coord_cartesian(ylim = c(-10, 120)) +
scale_y_continuous(breaks = seq(-20, 120, 20))
tiff("Annual N2 regression by Habitat", width = 400, height = 160, units = "mm", res = 300, compression = "lzw")
annual.data.sand %>%
ggplot(aes(Age, N2Flux, colour = Habitat)) +
geom_point(size = 4) +
geom_smooth(method = "lm", formula = y ~ poly(x,2), se = F, size = 2) +
theme(panel.background = element_rect(fill = "white", colour = NA),
axis.title.x = element_text(margin = margin(t = 15), size = 28),
axis.title.y = element_text(margin = margin(r = 15), size = 28),
axis.line.x = element_line(colour = "black", size = 0.8),
axis.line.y = element_line(colour = "black", size = 0.8),
panel.grid.major = element_line(colour = "grey70", size = 0.25),
axis.text.x = element_text(size = 20, colour = "black"),
axis.text.y = element_text(size = 20, colour = "black"),
legend.title = element_text(size = 23, face = "bold"),
legend.text = element_text(size = 20)) +
scale_colour_manual(values = c("darkorchid4", "olivedrab", "darkgoldenrod"),
labels = c("  oyster",
"  marsh",
"  sandflat")) +
xlab("Restored age (years)") +
ylab(expression(paste("Average ", N[2], " flux (", mu, "mol N ", m^2, " ", h^-1, ")"))) +
coord_cartesian(ylim = c(-10, 120)) +
scale_y_continuous(breaks = seq(-20, 120, 20))
dev.off()
tiff("Annual SOM regression", width = 500, height = 160, units = "mm", res = 300, compression = "lzw")
annual.data %>%
ggplot(aes(Age, PercentOM)) +
geom_hline(yintercept = 0, size = 0.2, colour = "grey23") +
geom_vline(xintercept = 0, size = 0.2, colour = "grey23") +
geom_point(size = 4) +
theme(panel.background = element_rect(fill = "white", colour = NA),
axis.title.x = element_text(margin = margin(t = 15), size = 26),
axis.title.y = element_text(margin = margin(r = 15), size = 26),
axis.line.x = element_line(colour = "black", size = 0.8),
axis.line.y = element_line(colour = "black", size = 0.8),
panel.grid.major = element_line(colour = "grey70", size = 0.25),
axis.text.x = element_text(size = 20, colour = "black"),
axis.text.y = element_text(size = 20, colour = "black")) +
geom_smooth(method = "lm", formula = y ~ poly(x,2), se = F, size = 2) +
xlab("Restored age (years)") +
ylab("SOM (%)") +
coord_cartesian(ylim = c(0, 10)) +
scale_y_continuous(breaks = seq(0, 10, 2))
dev.off()
annual.data.sand %>%
ggplot(aes(Age, PercentOM, colour = Habitat)) +
geom_point(size = 4) +
geom_smooth(method = "lm", formula = y ~ poly(x,2), se = F, size = 2) +
theme(panel.background = element_rect(fill = "white", colour = NA),
axis.title.x = element_text(margin = margin(t = 15), size = 26),
axis.title.y = element_text(margin = margin(r = 15), size = 26),
axis.line.x = element_line(colour = "black", size = 0.8),
axis.line.y = element_line(colour = "black", size = 0.8),
panel.grid.major = element_line(colour = "grey70", size = 0.25),
axis.text.x = element_text(size = 20, colour = "black"),
axis.text.y = element_text(size = 20, colour = "black"),
legend.title = element_text(size = 23, face = "bold"),
legend.text = element_text(size = 20))
annual.data.sand %>%
ggplot(aes(Age, PercentOM, colour = Habitat)) +
geom_point(size = 4) +
geom_smooth(method = "lm", formula = y ~ poly(x,2), se = F, size = 2) +
theme(panel.background = element_rect(fill = "white", colour = NA),
axis.title.x = element_text(margin = margin(t = 15), size = 26),
axis.title.y = element_text(margin = margin(r = 15), size = 26),
axis.line.x = element_line(colour = "black", size = 0.8),
axis.line.y = element_line(colour = "black", size = 0.8),
panel.grid.major = element_line(colour = "grey70", size = 0.25),
axis.text.x = element_text(size = 20, colour = "black"),
axis.text.y = element_text(size = 20, colour = "black"),
legend.title = element_text(size = 23, face = "bold"),
legend.text = element_text(size = 20)) +
scale_colour_manual(values = c("darkorchid4", "olivedrab", "darkgoldenrod"),
labels = c("  oyster",
"  marsh",
"  sandflat")) +
xlab("Restored age (years)") +
ylab("SOM (%)") +
coord_cartesian(ylim = c(0, 10)) +
scale_y_continuous(breaks = seq(0, 10, 2))
#Annual SOM regression with age, with a separate line for each habitat
tiff("Annual SOM regression by Habitat", width = 500, height = 160, units = "mm", res = 300, compression = "lzw")
annual.data.sand %>%
ggplot(aes(Age, PercentOM, colour = Habitat)) +
geom_point(size = 4) +
geom_smooth(method = "lm", formula = y ~ poly(x,2), se = F, size = 2) +
theme(panel.background = element_rect(fill = "white", colour = NA),
axis.title.x = element_text(margin = margin(t = 15), size = 26),
axis.title.y = element_text(margin = margin(r = 15), size = 26),
axis.line.x = element_line(colour = "black", size = 0.8),
axis.line.y = element_line(colour = "black", size = 0.8),
panel.grid.major = element_line(colour = "grey70", size = 0.25),
axis.text.x = element_text(size = 20, colour = "black"),
axis.text.y = element_text(size = 20, colour = "black"),
legend.title = element_text(size = 23, face = "bold"),
legend.text = element_text(size = 20)) +
scale_colour_manual(values = c("darkorchid4", "olivedrab", "darkgoldenrod"),
labels = c("  oyster",
"  marsh",
"  sandflat")) +
xlab("Restored age (years)") +
ylab("SOM (%)") +
coord_cartesian(ylim = c(0, 10)) +
scale_y_continuous(breaks = seq(0, 10, 2))
dev.off()
setwd("E:/R Markdown")
library("plyr")
library("dplyr")
library("ggplot2")
library("ggpmisc")
library("lmtest")
library("car")
library("MASS")
source("functions.R")
all.N2 <- read.csv("N2-flux\\clean\\N2-flux-by-core_with-summer15.csv", header = T, stringsAsFactors = F)
DNE <- read.csv("DNE\\clean\\DNE-clean_no-summer15_all-sites.csv", header = T, stringsAsFactors = F)
inund <- read.csv("Inundation\\clean\\inundation-clean_all-sites_all-seasons.csv", header = T)
inund$Age <- as.numeric(inund$Age)
SOM <- read.csv("LOI\\clean\\LOI-by-type_all-seasons_all-sites.csv", header = T)
SOD <- read.csv("SOD\\clean\\SOD-by-type_all-seasons_all-sites.csv", header = T)
O2conc <- read.csv("O2-conc\\clean\\O2-conc-by-type_all-seasons_all-sites.csv", header = T)
nutflux <- read.csv("nutrient-flux\\clean\\nutrient-flux-by-type_all-seasons_all-sites.csv", header = T)
DNF <- read.csv("N2-flux\\clean\\N2-flux-by-type_all-seasons_all-sites.csv", header = T)
#Sequential merges to combine all relevant data frames into a master data frame
#Includes all cores and seasons (including Summer 2015) initially- easier to double-check
#sort = F maintains original ordering scheme
m1 <- merge(inund, SOM, by = c("Site", "Season", "CoreName"), all.x = T, sort = F)
m2 <- merge(m1, SOD, by = c("Site", "Season", "CoreName"), all.x = T, sort = F)
m3 <- merge(m2, O2conc, by = c("Site", "Season", "CoreName"), all.x = T, sort = F)
m4 <- merge(m3, nutflux, by = c("Site", "Season", "CoreName"), all.x = T, sort = F)
m5 <- merge(m4, DNF, by = c("Site", "Season", "CoreName"), all.x = T, sort = F)
#Ensuring that preferred order is preserved
#This will turn Summer 2015 values to NA for easy elimination
m5$Season <- factor(m5$Season, levels = c("Summer", "Fall", "Winter", "Spring"))
m5$Site <- factor(m5$Site, levels = c("IMS", "Carrot", "NOAA", "Army"))
m5$CoreName <- factor(m5$CoreName, levels = c("LO", "HO", "LM", "MM", "HM", "Ref"))
m5$Habitat <- factor(m5$Habitat, levels = c("oyster", "marsh", "Ref"))
#Should only get rid of Summer 2015 rows
master <- na.omit(m5)
#Reorder the columns
master <- master[c("Season", "Site", "Age", "CoreName", "Habitat",  "avg_N2Flux", "Perc_Inun", "avg_PercentOM", "avg_SOD", "avg_O2conc", "avg_flux_NOx", "avg_flux_NH3")]
#Rename the columns so they're less bulky
master <- plyr::rename(master, c("avg_N2Flux" = "N2flux", "Perc_Inun" = "Inund", "avg_PercentOM" = "SOM", "avg_SOD" = "SOD", "avg_O2conc" = "O2conc", "avg_flux_NOx" = "NOxflux", "avg_flux_NH3" = "NH3flux"))
View(inund)
View(SOM)
View(SOD)
head(inund)
head(SOM)
View(m5)
View(master)
master <- season.numbers(master)
master <- habitat.numbers(master)
master <- master[c("Season", "SeasonNumber", "Site", "Age", "CoreName", "Habitat", "HabitatNumber",  "N2flux", "Inund", "SOM", "SOD", "O2conc", "NOxflux", "NH3flux")]
summer <- master[master$Season == "Summer", ]
fall <- master[master$Season == "Fall", ]
winter <- master[master$Season == "Winter", ]
spring <- master[master$Season == "Spring", ]
IMS <- master[master$Site == "IMS", ]
Carrot <- master[master$Site == "Carrot", ]
NOAA <- master[master$Site == "NOAA", ]
Army <- master[master$Site == "Army", ]
View(Army)
fit.all <- rpart(N2flux ~ SeasonNumber + HabitatNumber + Age + Inund + SOM + SOD + O2conc + NOxflux + NH3flux, method = "anova", data = master)
library("rpart")
library("rpart.plot")
fit.all <- rpart(N2flux ~ SeasonNumber + HabitatNumber + Age + Inund + SOM + SOD + O2conc + NOxflux + NH3flux, method = "anova", data = master)
summary(fit.all)
plot(fit.all, uniform = T)
text(fit.all, use.n = T, all = T, cex = 0.8)
pruned.all <- prune(fit.all, cp = 0.04)
plot(pruned.all, uniform = T)
text(pruned.all, use.n = T, all = T, cex = 0.8)
pruned.all <- prune(fit.all, cp = 0.01)
plot(pruned.all, uniform = T)
text(pruned.all, use.n = T, all = T, cex = 0.8)
summary(fit.all, cp = 0.002)
pruned.all <- prune(fit.all, cp = 0.04)
plot(pruned.all, uniform = T)
text(pruned.all, use.n = T, all = T, cex = 0.8)
fit.BCG <- rpart(N2flux ~ Inund + SOM + SOD + O2conc + NOxflux + NH3flux, method = "anova", data = master)
summary(fit.BCG)
plotcp(fit.BCG)
plot(fit.BCG, uniform = T)
text(fit.BCG, use.n = T, all = T, cex = 0.8)
pruned.BCG <- prune(fit.BCG, cp = 0.055)
plot(pruned.BCG, uniform = T)
text(pruned.BCG, use.n = T, all = T, cex = 0.9)
summary(pruned.BCG)
prp(pruned.BCG)
pruned.BCG <- prune(fit.BCG, cp = 0.04)
plot(pruned.BCG, uniform = T)
text(pruned.BCG, use.n = T, all = T, cex = 0.9)
pruned.BCG <- prune(fit.BCG, cp = 0.055)
plot(pruned.BCG, uniform = T)
text(pruned.BCG, use.n = T, all = T, cex = 0.9)
plot(pruned.all, uniform = T)
text(pruned.all, use.n = T, all = T, cex = 0.8)
fit.BCG <- rpart(N2flux ~ Inund + SOM + SOD + O2conc + NOxflux + NH3flux, method = "anova", data = master)
summary(fit.BCG)
fit.BCG <- rpart(N2flux ~ Inund + SOM + SOD + O2conc + NOxflux + NH3flux, method = "anova", data = master)
summary(fit.BCG)
plotcp(fit.BCG)
plot(fit.BCG, uniform = T)
text(fit.BCG, use.n = T, all = T, cex = 0.8)
pruned.BCG <- prune(fit.BCG, cp = 0.055)
plot(pruned.BCG, uniform = T)
text(pruned.BCG, use.n = T, all = T, cex = 0.9)
pruned.BCG <- prune(fit.BCG, cp = 0.04)
plot(pruned.BCG, uniform = T)
text(pruned.BCG, use.n = T, all = T, cex = 0.9)
pruned.BCG <- prune(fit.BCG, cp = 0.04)
plot(pruned.BCG, uniform = T)
text(pruned.BCG, use.n = T, all = T, cex = 0.9)
summary(pruned.BCG)
rsq.rpart(pruned.BCG)
summer.tree <- rpart(N2flux ~ Age + Inund + SOM + SOD + O2conc + NOxflux + NH3flux, method = "anova", data = summer)
summer.tree$cptable
summer.prune <- prune(summer.tree, cp = summer.tree$cptable[which.min(summer.tree$cptable[ ,"xerror"]), "CP"])
summer.prune <- prune(summer.tree, cp = summer.tree$cptable[which.min(summer.tree$cptable[ ,"xerror"]), "CP"])
plot(summer.prune, uniform = T, main = "Pruned Regression Tree for Summer DNF Rates", cex = 0.5)
text(summer.prune, use.n = T, all = T, cex = 0.5)
setwd("E:/R Markdown")
pruned.all <- prune(fit.all, cp = 0.04)
plot(pruned.all, uniform = T)
text(pruned.all, use.n = T, all = T, cex = 0.8)
summary(pruned.all)
fit.all <- rpart(N2flux ~ SeasonNumber + HabitatNumber + Age + Inund + SOM + SOD + O2conc + NOxflux + NH3flux, method = "anova", data = master)
summary(fit.all)
plot(fit.all, uniform = T)
text(fit.all, use.n = T, all = T, cex = 0.8)
par(mfrow = c(1,2))
library("plyr")
library("dplyr")
library("car")
library("ggplot2")
library("ggpmisc")
library("rpart")
library("rpart.plot")
source("functions.R")
#Sequential merges to combine all relevant data frames into a master data frame
#Includes all cores and seasons (including Summer 2015) initially- easier to double-check
#sort = F maintains original ordering scheme
m1 <- merge(inund, SOM, by = c("Site", "Season", "CoreName"), all.x = T, sort = F)
m2 <- merge(m1, SOD, by = c("Site", "Season", "CoreName"), all.x = T, sort = F)
m3 <- merge(m2, O2conc, by = c("Site", "Season", "CoreName"), all.x = T, sort = F)
m4 <- merge(m3, nutflux, by = c("Site", "Season", "CoreName"), all.x = T, sort = F)
m5 <- merge(m4, DNF, by = c("Site", "Season", "CoreName"), all.x = T, sort = F)
#Ensuring that preferred order is preserved
#This will turn Summer 2015 values to NA for easy elimination
m5$Season <- factor(m5$Season, levels = c("Summer", "Fall", "Winter", "Spring"))
m5$Site <- factor(m5$Site, levels = c("IMS", "Carrot", "NOAA", "Army"))
m5$CoreName <- factor(m5$CoreName, levels = c("LO", "HO", "LM", "MM", "HM", "Ref"))
m5$Habitat <- factor(m5$Habitat, levels = c("oyster", "marsh", "Ref"))
#Should only get rid of Summer 2015 rows
master <- na.omit(m5)
#Reorder the columns
master <- master[c("Season", "Site", "Age", "CoreName", "Habitat",  "avg_N2Flux", "Perc_Inun", "avg_PercentOM", "avg_SOD", "avg_O2conc", "avg_flux_NOx", "avg_flux_NH3")]
#Rename the columns so they're less bulky
master <- plyr::rename(master, c("avg_N2Flux" = "N2flux", "Perc_Inun" = "Inund", "avg_PercentOM" = "SOM", "avg_SOD" = "SOD", "avg_O2conc" = "O2conc", "avg_flux_NOx" = "NOxflux", "avg_flux_NH3" = "NH3flux"))
#Use functions I wrote to add columns with Habitat & Season represented by #s
#Just in case rpart was tempted to do something weird with the characters
master <- season.numbers(master)
master <- habitat.numbers(master)
#Reorder the columns
master <- master[c("Season", "SeasonNumber", "Site", "Age", "CoreName", "Habitat", "HabitatNumber",  "N2flux", "Inund", "SOM", "SOD", "O2conc", "NOxflux", "NH3flux")]
#Create separate dataframes for each season and site
summer <- master[master$Season == "Summer", ]
fall <- master[master$Season == "Fall", ]
winter <- master[master$Season == "Winter", ]
spring <- master[master$Season == "Spring", ]
IMS <- master[master$Site == "IMS", ]
Carrot <- master[master$Site == "Carrot", ]
NOAA <- master[master$Site == "NOAA", ]
Army <- master[master$Site == "Army", ]
fit.all <- rpart(N2flux ~ SeasonNumber + HabitatNumber + Age + Inund + SOM + SOD + O2conc + NOxflux + NH3flux, method = "anova", data = master)
summary(fit.all)
plot(fit.all, uniform = T)
text(fit.all, use.n = T, all = T, cex = 0.8)
par(mfrow = c(1,2))
pruned.all <- prune(fit.all, cp = 0.04)
plot(pruned.all, uniform = T)
text(pruned.all, use.n = T, all = T, cex = 0.8)
summary(pruned.all)
fit.BCG <- rpart(N2flux ~ Inund + SOM + SOD + O2conc + NOxflux + NH3flux, method = "anova", data = master)
plotcp(fit.BCG)
plot(fit.BCG, uniform = T)
text(fit.BCG, use.n = T, all = T, cex = 0.8)
pruned.BCG <- prune(fit.BCG, cp = 0.04)
par(mfrow = c(1,1))
plot(pruned.BCG, uniform = T)
text(pruned.BCG, use.n = T, all = T, cex = 0.9)
summary(pruned.BCG)
rsq.rpart(pruned.BCG)
rsq.val
rsq.value(pruned.BCG)
?rsq.rpart
par(mfrow = c(2,1))
rsq.rpart(pruned.BCG)
par(mfrow = c(1,2))
rsq.rpart(pruned.BCG)
par(mfrow = c(1,2))
rsq.rpart(pruned.BCG)
plot(pruned.all, uniform = T)
text(pruned.all, use.n = T, all = T, cex = 0.8)
summary(pruned.all)
summary(pruned.BCG)
library("plyr")
library("dplyr")
library("ggplot2")
library("ggpmisc")
library("lmtest")
library("car")
library("MASS")
source("functions.R")
all.N2 <- read.csv("N2-flux\\clean\\N2-flux-by-core_with-summer15.csv", header = T, stringsAsFactors = F)
DNE <- read.csv("DNE\\clean\\DNE-clean_no-summer15_all-sites.csv", header = T, stringsAsFactors = F)
#Uses basic factor settings to input NA for Lo/Hi Ref and Summer 2015 cores
all.N2 <- set.factors.basic(all.N2)
all.N2$Age <- as.numeric(all.N2$Age)
all.N2$Habitat <- factor(all.N2$Habitat, levels = c("oyster", "marsh", "Ref"))
#Eliminate Lo/Hi Ref and Summer 2015 by getting rid of NAs
basic.N2 <- na.omit(all.N2)
DNE <- set.factors.basic(DNE)
DNE <- na.omit(DNE)
#Start by finding the optimal value of lambda
#Create a column with positive values of N2 by adding 21 to each flux
positive.N2 <- mutate(basic.N2,
PosN2 = N2Flux + 21)
#Create a log-likelihood graph using a command from the MASS package
bctrans <- boxcox(PosN2 ~ Age, data = positive.N2,
lambda = seq(0, 1, by = 0.1))
#Identify the maximum likelihood value
which.max(bctrans$y)
#Use that maximum likelihood value (from the y axis) to determine the associated lambda (on the x axis)
bctrans$x[which.max(bctrans$y)]
#Take the variable to the power of the lambda to perform the transformation!
BC.N2 <- mutate(positive.N2,
N2BoxCox = (((PosN2 ^ 0.454) - 1) / 0.454))
#Calculate transformed N2 flux values by core type
BC.N2.type <- ddply(BC.N2, c("Season", "Site", "CoreName", "Habitat", "Age"), summarise,
Avg_N2BoxCox = mean(N2BoxCox))
#Histogram and QQ plots look much better
hist(BC.N2$N2BoxCox)
qqnorm(BC.N2$N2BoxCox)
qqline(BC.N2$N2BoxCox)
#I believe this plot visualizes the variance, which looks more even
plot(BC.N2$N2BoxCox)
#Visualizing the regression with the Box Cox transformation
reg1 <- lm(N2BoxCox ~ Age, BC.N2)
par(mfrow = c(2,2))
plot(reg1)
#Transformed values pass Bartlett Test except for when grouped by Site (p = 0.01)
#Pass Levene Test for every grouping
#Change grouping variable after ~ to view various outcomes
bartlett.test(N2BoxCox ~ Habitat, BC.N2)
leveneTest(N2BoxCox ~ Habitat, BC.N2)
#Transformed data passes Shapiro-Wilk test for all groupings except Army & oysters
BC.norm.Season <- BC.N2 %>%
group_by(Season) %>%
summarise(SW.pvalue = shapiro.test(N2BoxCox)$p.value) %>%
mutate(Result = ifelse(SW.pvalue > 0.05, "Normal", "Non-Normal"))
BC.norm.Site <- BC.N2 %>%
group_by(Site) %>%
summarise(SW.pvalue = shapiro.test(N2BoxCox)$p.value) %>%
mutate(Result = ifelse(SW.pvalue > 0.05, "Normal", "Non-Normal"))
BC.norm.Habitat <- BC.N2 %>%
group_by(Habitat) %>%
summarise(SW.pvalue = shapiro.test(N2BoxCox)$p.value) %>%
mutate(Result = ifelse(SW.pvalue > 0.05, "Normal", "Non-Normal"))
interact.anova <- aov(N2Flux ~  Habitat * Site * Season, data = BC.N2)
summary(interact.anova)
TukeyHSD(interact.anova)
summary(interact.anova)
habitat.anova <- aov(N2BoxCox ~ Habitat, data = BC.N2)
summary(habitat.anova)
indep.anova <- aov(N2Flux ~ Season + Site, data = BC.N2)
summary(indep.anova)
season.anova <- aov(N2BoxCox ~ Season, data = BC.N2)
summary(season.anova)
site.anova <- aov(N2BoxCox ~ Site, data = BC.N2)
summary(site.anova)
summary(interact.anova)
interact2 <- aov(N2Flux ~ Site * Season, data = BC.N2)
summary(interact2)
TukeyHSD(interact2)
DNE %>%
ggplot(aes(Site, DNE, fill = CoreName)) +
geom_bar(stat = "identity", position = "dodge") + facet_grid(Season ~ .)
basic.N2 %>%
ggplot(aes(Age, N2Flux, colour = Habitat)) +
geom_point() +
facet_grid(Season ~ .) +
geom_smooth(method = "lm", formula = formula, se = F) +
stat_poly_eq(formula = formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = T) +
stat_fit_glance(method = "lm",
geom = "text",
aes(label = paste("P-value =", signif(..p.value.., digits = 4), sep = "")),
label.x.npc = "right")
